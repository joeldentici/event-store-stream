const {Utility, Async, ConcurrentFree: F} = require('monadic-js');
const {seqAll} = Utility;
const esClient = require('node-eventstore-client');
const {getInterestingEvents} = require('../util.js');

/**
 *	event-store-stream.Effector
 *	written by Joel Dentici
 *	on 6/20/2017
 *
 *	An Effector sits between a DSL that runs effects in response to events and
 *	the Event Store that provides the events. "Programs" in the DSL are subscribed
 *	to map an event of some type to an instruction (or composition of instructions)
 *	in the DSL.
 *
 *	All you need to do for setup is provide the event store connection and a function
 *	to interpret the DSL programs. Then you register each of your programs to run when
 *	an event occurs by calling `.map`. Once you have registered all of your programs,
 *	call `.start` to begin the denormalization process.
 */
class Effector {
	/**
	 *	new :: ((ConcurrentFree f e a -> Async e a), StreamConnection, int) -> Effector
	 *
	 *	Creates a new effector. Events are mapped to instructions to run with
	 *	the provided interpreter.
	 *
	 *	Events are buffered by the provided throttle time (milliseconds)
	 *	and processed together in the window they occur in.
	 */
	constructor(interpret, es, throttle) {
		this.interpret = interpret;
		this.es = es;
		this.throttle = throttle;
		this.mappers = {};
	}

	/**
	 *	map :: Effector -> (string, Event -> Transaction ()) -> ()
	 *
	 *	Register a function that maps events of a specific type
	 *	to queries on the database.
	 */
	map(eventType, mapper) {
		this.mappers[eventType] = mapper;
	}

	/**
	 *	start :: Effector -> () -> Observable () | ()
	 *
	 *	Start the effector. The return value will not
	 *	actually be an Observable when using the normal Async
	 *	scheduler, but instead undefined. We only need to get the
	 *	Observable for testing anyway.
	 */
	start() {
		const eventTypes = Object.keys(this.mappers);
		//Async () Error (Observable ())
		return do Async {
			//load the all$ stream
			all$ <- this.es.all$(false, this.es.credentials)

			//filter out events we are not interested and buffer events
			//since they may come in faster than we can process them
			events$ = getInterestingEvents(all$, eventTypes, this.throttle)

			run$ = this.run(events$)

			run$.forEach(x => x)

			return run$
		}.run();
	}

	/**
	 *	run :: Effector -> Observable [Event] -> Observable ()
	 *
	 *	Processes events through the mappers and then
	 *	runs all the programs for the current event window.
	 *
	 *	This is written such that if a new window of events
	 *	comes in while the previous window is being processed,
	 *	processing of the new window is delayed until the previous
	 *	window finishes. This ensures that all events are always
	 *	processed in the order they are received.
	 */
	run(events$) {
		return events$.concatMap(events => {
			//computation to run
			return this.interpret(do F {
				do! F.Control.delay //we don't really need this but it doesn't hurt

				//map events to their "programs"
				programs = events.map(event => 
					this.mappers[event.eventType](event))

				//run programs from left-to-right sequentially:
				//we need to do sequential execution to ensure that
				//events are handled in the order they occur. Otherwise
				//we might expect some data to be in place to use in an
				//effect, that hasn't been put there yet.
				do! seqAll(F, programs)

				return undefined
			}).toObservable()

		}).share();
	}
}

module.exports = Effector;