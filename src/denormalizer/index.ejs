const {Transaction: T} = require('transactional-db');
const {Utility, Async,} = require('monadic-js');
const {seqAll, resume} = Utility;
const esClient = require('node-eventstore-client');

const Long = require('long');
const {getInterestingEvents} = require('../util.js');


/**
 *	event-store-stream.Denormalizer
 *	written by Joel Dentici
 *	on 6/20/2017
 *
 *	A Denormalizer provides a layer between queries/statements
 *	to update a read model and the Event Store that conveniently
 *	keeps track of your position in the Event Store and running your
 *	statements in a transaction.
 *
 *	All you need to do for setup is provide the event store connection and database
 *	manager to the denormalizer. Then you register each of your read model updaters
 *	to map specific events to statements by calling `.map`. Once you have registered
 *	all of your updaters, call `.start` to begin the denormalization process.
 *
 *	There is no need for shutdown logic, since if this is in the middle of processing
 *	an update transaction when the server is killed, it will resume safely at the same
 *	point the next time it is brought up.
 */
class Denormalizer {
	/**
	 *	new :: (DBHManager, StreamConnection, int, int, IBus) -> Denormalizer
	 *
	 *	Creates a new denormalizer. Queries are ran on dbm, events
	 *	are loaded from es. If an optional event bus is supplied, then
	 *	events emitted by mappers will be published to it.
	 *
	 *	Events are loaded batchSize events at a time.
	 *
	 *	Events are buffered by the provided throttle time (milliseconds)
	 *	and processed together in the window they occur in.
	 */
	constructor(dbm, es, batchSize, throttle, eventBus = {publish: (_,__) => null}) {
		this.dbm = dbm;
		this.es = es;
		this.bus = eventBus;
		this.batchSize = batchSize;
		this.throttle = throttle;
		this.mappers = {};
	}

	/**
	 *	map :: Denormalizer -> (string, Event -> Transaction ()) -> ()
	 *
	 *	Register a function that maps events of a specific type
	 *	to queries on the database.
	 */
	map(eventType, mapper) {
		this.mappers[eventType] = mapper;
	}

	/**
	 *	start :: Denormalizer -> () -> ()
	 *
	 *	Start the denormalizer.
	 */
	start() {
		const eventTypes = Object.keys(this.mappers);
		//Async () Error (Observable ())
		return do Async {
			//get position fields from database
			[row] <- this.dbm.runTransaction(T.query(
				`SELECT low_commit,high_commit,low_prepare,high_prepare from history`))

			{low_commit, high_commit, low_prepare, high_prepare} = row

			//position that can be used with eventstore-client
			position = getPosition(low_commit, high_commit, low_prepare, high_prepare)

			//load the all$ stream starting at the position we had stored
			all$ <- this.es.allFrom$(
				position, false, this.es.credentials, this.batchSize)

			//filter out events we are not interested and buffer events
			//since they may come in faster than we can process them
			events$ = getInterestingEvents(all$, eventTypes, this.throttle)

			run$ = this.run(events$)

			run$.forEach(x => x)

			return run$
		}.run();
	}

	/**
	 *	run :: Denormalizer -> Observable [Event] -> ()
	 *
	 *	Processes events through the mappers and then
	 *	runs a transaction for each batch of events on
	 *	the database to update it.
	 *
	 *	This is written such that if a new window of events
	 *	comes in while the previous window is being processed,
	 *	processing of the new window is delayed until the previous
	 *	window finishes. This ensures that all events are always
	 *	processed in the order they are received.
	 */
	run(events$) {
		return events$.concatMap(events => {
			//computation to run
			return this.dbm.runTransaction(do T {
				//map events to their queries
				queries = events.map(event => 
					resume(this.mappers[event.eventType](event)))

				//perform queries from left-to-right, sequentially
				do! seqAll(T, queries)

				//position of the last event we handled
				position = events[events.length - 1].position
				low_commit = position.commitPosition.getLowBits()
				high_commit = position.commitPosition.getHighBits()
				low_prepare = position.preparePosition.getLowBits()
				high_prepare = position.preparePosition.getHighBits()

				//update the last handled position in the database
				//so we can resume from there if anything goes wrong
				do! T.query(`UPDATE history SET 
					low_commit = ?, high_commit = ?,
					low_prepare = ?, high_prepare = ?`,
					low_commit,
					high_commit,
					low_prepare,
					high_prepare)
			}.catch(e => {
				console.error(e);
				return T.of()
			}), this.bus).toObservable();
		}).share();
	}
}

function getPosition(low_commit, high_commit, low_prepare, high_prepare) {
	return expr {
		if (low_commit === 0 && high_commit === 0 
		&& low_prepare === 0 && high_prepare === 0)
			null 
		else 
			new esClient.Position(
				new Long(low_commit, high_commit),
				new Long(low_prepare, high_prepare))
	};
}



module.exports = Denormalizer;